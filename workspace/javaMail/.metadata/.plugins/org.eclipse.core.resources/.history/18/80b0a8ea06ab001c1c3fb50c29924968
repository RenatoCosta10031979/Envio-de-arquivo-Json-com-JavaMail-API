package enviando.email;

import java.io.FileWriter;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.Address;
import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JOptionPane;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

public class ObjetoEnviaEmail {

	// Atributos
	private String nomeRemetente = "Renato Costa";
	private String senha = "ACEGHJace1357";
	private String emailRemetente = "rgcfisica@gmail.com";
	private String emailDestinatario = "jsrenatoguccing@gmail.com";
	private String tituloEmail = "teste";
	private String conteudoEmail = " Enviando e-mail com JavaMail API";

	// Constructor
	ObjetoEnviaEmail() {

	}

	// Método
	public void testeEmail() throws MessagingException, IOException {

		// Organizar o código no arquivo Json
		Gson gson = new GsonBuilder().setPrettyPrinting().create();
		FileWriter jsonWrite = new FileWriter(
				"/home/cafecomjava/workspace/javaMail/enviando-email/src/main/java/enviando/email/arquivo.json");

		// Configurações das propriedades:autorização, autenticação, servidor gmail.
		// porta do servidor, socket
		Properties properties = new Properties();
		properties.put("mail.smtp.auth", "true"); // autorização
		properties.put("mail.smtp.starttls", "true"); // autenticação
		properties.put("mail.smtp.host", "smtp.gmail.com"); // servidor gmail do google
		properties.put("mail.smtp.port", "465"); // porta do servidor
		properties.put("mail.smtp..socketFactory.port", "465"); // especifica a porta a ser conectada pelo socket
		properties.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");// Classe socket de
																							// conexão ao SMTP

		Session session = Session.getInstance(properties, new Authenticator() {
			@Override
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication(emailRemetente, senha);
			}
		});

		// Anexar arquivo.txt
		Address[] toUser = InternetAddress.parse(emailDestinatario);

		Message message = new MimeMessage(session);
		message.setFrom(new InternetAddress(emailRemetente, nomeRemetente)); // autor do e-mail ( e-mail de origem)
		message.setRecipients(Message.RecipientType.TO, toUser);
		message.setSubject(tituloEmail);
		message.setText(conteudoEmail);

		Transport.send(message);

	}

	public String getNomeRemetente() {
		return nomeRemetente;
	}

	public void setNomeRemetente(String nomeRemetente) {
		this.nomeRemetente = nomeRemetente;
	}

	public String getSenha() {
		return senha;
	}

	public void setSenha(String senha) {
		this.senha = senha;
	}

	public String getEmailRemetente() {
		return emailRemetente;
	}

	public void setEmailRemetente(String emailRemetente) {
		this.emailRemetente = emailRemetente;
	}

	public String getEmailDestinatario() {
		return emailDestinatario;
	}

	public void setEmailDestinatario(String emailDestinatario) {
		this.emailDestinatario = emailDestinatario;
	}

	public String getTituloEmail() {
		return tituloEmail;
	}

	public void setTituloEmail(String tituloEmail) {
		this.tituloEmail = tituloEmail;
	}

	public String getConteudoEmail() {
		return conteudoEmail;
	}

	public void setConteudoEmail(String conteudoEmail) {
		this.conteudoEmail = conteudoEmail;
	}

}
